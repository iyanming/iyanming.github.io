<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Javascript 中的数据类型判断]]></title>
      <url>/2017/09/25/Javascript%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/</url>
      <content type="html"><![CDATA[<h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><p>我们常使用typeof来判断数据类型，在常规场景中足以应付数据类型判断的需要：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line"><span class="attr">name</span>: <span class="string">'zhangxiang'</span></div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'this is a function'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="number">1</span>);  <span class="comment">// number</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="string">'1'</span>);  <span class="comment">//string</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">true</span>);  <span class="comment">//boolean</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>); <span class="comment">//object</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">undefined</span>); <span class="comment">//undefined</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> obj); <span class="comment">//object</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> foo);  <span class="comment">//function</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> arr);   <span class="comment">//object</span></div></pre></td></tr></table></figure></p>
<p>typeof可以判断所有js中的基本数据类型（Null,Undefined,Boolean,String,Number），虽然null使用typeof返回的是object，但是不影响它的基本使用。但是如果想要判断array，null等，它就起不到作用了。</p>
<h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p>instanceof运算符用来测试一个对象在其原型链中是否存在一个构造函数的prototype属性。<br>语法：object instanceof constructor<br>其实它适合于判断自定义的类实例对象，而不是用来判断原生的数据类型。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// a.html</div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">//main.html</div><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"a.html"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> frame = <span class="built_in">window</span>.frame[<span class="number">0</span>];</div><div class="line">  <span class="keyword">var</span> a = frame.a;</div><div class="line">  <span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> <span class="built_in">Array</span>);  <span class="comment">// false</span></div><div class="line">  <span class="built_in">console</span>.log(a.contructor === <span class="built_in">Array</span>);  <span class="comment">//false</span></div><div class="line">  <span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> frame.Array); <span class="comment">// true</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>iframe 之间不会共享原型链, 因为他们有独立的执行环境, 所以 frame a 中的数组 a 不会是本执行环境的实例对象。 通过特性嗅探同样不靠谱, 像通过 contructor，sort, slice 等等的特有的数组(或者其他数据类型)方法或属性, 万一对象中也有 sort, slice 属性, 就会发生误判。所以最靠谱的方法是使用 Object.prototype.toString 方法。</p>
<h2 id="Object-prototype-toString"><a href="#Object-prototype-toString" class="headerlink" title="Object.prototype.toString"></a>Object.prototype.toString</h2><p>使用Object.prototype.toString方法，可以获取到变量的准确类型。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">1</span>);  <span class="string">'[object Number]'</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">'1'</span>); <span class="string">'[object String]'</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">NaN</span>); <span class="string">'[object Number]'</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(foo);  <span class="string">'[object Function]'</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]); <span class="string">'[object Array]'</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>); <span class="string">'[object Undefined]'</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>); <span class="string">'[object Null]'</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>); <span class="string">'[object Boolean]'</span></div></pre></td></tr></table></figure></p>
<p>Object.prototype.toString 的原理是当调用的时候, 就取值内部的 [[Class]] 属性值, 然后拼接成 ‘[object ‘ + [[Class]] + ‘]’ 这样的字符串并返回. 然后我们使用 call 方法来获取任何值的数据类型。</p>
<h1 id="有用的数据类型判断函数"><a href="#有用的数据类型判断函数" class="headerlink" title="有用的数据类型判断函数"></a>有用的数据类型判断函数</h1><h2 id="isArray-polyfill"><a href="#isArray-polyfill" class="headerlink" title="isArray polyfill"></a>isArray polyfill</h2><p>isArray 是数组类型内置的数据类型判断函数, 但是会有兼容性问题, 所以模拟 underscore 中的写法如下:</p>
<pre><code>isArray = Array.isArray || function(array){
  return Object.prototype.toString.call(array) === &apos;[object Array]&apos;;
}
</code></pre><h2 id="isNaN-polyfill"><a href="#isNaN-polyfill" class="headerlink" title="isNaN polyfill"></a>isNaN polyfill</h2><p>判断一个数是不是 NaN 不能单纯地使用 === 这样来判断, 因为 NaN 不与任何数相等, 包括自身, 所以:</p>
<pre><code>isNaN: function(value){
  return isNumber(value) &amp;&amp; isNaN(value);
}
</code></pre><p>这里的 isNumber 就是用上面所说的Object.prototype.toString进行判断的,然后使用isNaN来判断值,至于为什么需要在判断 isNaN 之前需要判断是不是 Number类型,这是因为NaN本身也是数字类型(Object.prototype.toString 可知), 在ES6的isNaN 中只有值为数字类型使用NaN才会返回 true, 这是为了模拟 ES6 的 isNaN。</p>
<h2 id="判断是否是-DOM-元素"><a href="#判断是否是-DOM-元素" class="headerlink" title="判断是否是 DOM 元素"></a>判断是否是 DOM 元素</h2><p>在实际项目里面, 有时或许我们需要判断是否是 DOM 元素对象, 那么在判断的时候利用的是 DOM 对象特有的 nodeType 属性:<br>兼容做法原理是通过对象的 hasOwnProperty 方法来判断对象是否拥有 callee 属性从而判断是不是 arguments 对象.<br>    isElement: function(obj){<br>      return !!(obj &amp;&amp; obj.nodeType === 1);<br>    }</p>
<h2 id="判断是否是对象"><a href="#判断是否是对象" class="headerlink" title="判断是否是对象"></a>判断是否是对象</h2><pre><code>isObject: function(obj){
  var type = typeof obj;
  return type === &apos;function&apos; || typeof === &apos;object&apos; &amp;&amp; obj !== null;
}
</code></pre><p>这里的对象是狭义的, 是通常所指的 key-value 型的集合, 或者是 function 函数并且不为 null。</p>
<h2 id="判断是否是-arguments-对象-polyfill"><a href="#判断是否是-arguments-对象-polyfill" class="headerlink" title="判断是否是 arguments 对象 polyfill"></a>判断是否是 arguments 对象 polyfill</h2><p>判断一个对象是不是 arguments 对象可以通过 Object.prototype.toString 来判断, 但是低版本的浏览器不支持, 他们返回的是 [object Object], 所以需要兼容:</p>
<pre><code>isArguments: function(obj){
  return Object.prototype.toString.call(obj) === &apos;[object Arguments]&apos; || (obj != null &amp;&amp; Object.hasOwnProperty.call(obj, &apos;callee&apos;));
}
</code></pre><p>兼容做法原理是通过对象的 hasOwnProperty 方法来判断对象是否拥有 callee 属性从而判断是不是 arguments 对象。</p>
]]></content>
      
        
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux下php环境搭建(xampp)]]></title>
      <url>/2017/08/30/linux%E4%B8%8Bphp%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(xampp)/</url>
      <content type="html"><![CDATA[<p>学习一门语言之前需要配置环境，今天我们就将配置php开发环境，为php的后续学习做准备。<br>xampp是一个功能强大的建站集成软件包。这个软件包原来的名字是 LAMPP，但是为了避免误解，最新的几个版本就改名为 XAMPP 了。<br><a id="more"></a><br>1.使用linux的wget命令下载，下载前先进入opt文件夹：</p>
<pre><code>cd /opt
wget 下载地址
</code></pre><p>2.然后我们先赋予755权限，防止因为权限不足导致无法安装。</p>
<pre><code>chmod -R 755 xampp-linux-1.8.3-5-installer.run
</code></pre><p>关于755权限，详见这里：<a href="http://jingyan.baidu.com/article/54b6b9c0d12e662d593b4761.html" target="_blank" rel="external">777,644,755等用户权限说明</a><br>3.然后运行这个安装文件</p>
<pre><code>./xampp-linux-1.8.3-5-installer.run
</code></pre><p>4.启动xampp：<br>sudo ./lampp start<br>启动成功后，到浏览器输入localhost，可以看到xampp的主页：<br><img src="http://img.blog.csdn.net/20160920141303450" alt="xampp"><br>5.新建php页面测试：<br>在/opt/lampp/htdocs下新建test.php文件，代码如下:</p>
<pre><code>&lt;?php
   phpinfo();
 ?&gt;
</code></pre><p>然后浏览器访问<a href="http://localhost/test.php，查看结果。" target="_blank" rel="external">http://localhost/test.php，查看结果。</a></p>
<p>6.运行mysql：<br>注意需要进入到目录！看下图。<br>进入之后，<br>第一步输入用户名密码，进入之后我们就可以执行我们熟悉的sql语句了。<br><img src="http://ooerhngjn.bkt.clouddn.com/mysql.png" alt="mysql"><br>7.停止xampp：<br>sudo ./lampp stop<br>服务就停止了。</p>
<p>最后我们就可以愉快的开始php的学习了。</p>
]]></content>
      
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[知识积累]]></title>
      <url>/2017/08/27/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/</url>
      <content type="html"><![CDATA[<p>ps -e | grep apache  查看进程（个人理解）</p>
<p>./    这种写法后面都跟一个脚本文件 用来执行脚本</p>
<p>service apache2 status 显示apache2服务的当前状态</p>
<p>./mysql -uroot -p123456    (root为用户，123456为密码)运行mysql</p>
 <a id="more"></a>
<p>css类名选择器：class 中同时包含 important 和 warning 的所有元素有银色的背景<br>.important.warning {background:silver;}</p>
<p>css flexbox布局:  <a href="http://zh.learnlayout.com/flexbox.html" target="_blank" rel="external">点这里～飞机票</a><br>                             flex-direction 属性规定灵活项目的方向:<a href="http://www.runoob.com/cssref/css3-pr-flex-direction.html" target="_blank" rel="external">详细用法</a></p>
<p>CSS3特有的选择器，E &gt; F 表示选择E元素的所有子F元素，与E F的区别在于，E F选择所有后代元素，&gt;只选择一代。 没有&lt;的用法。<br>E &gt;*表示选择E元素的所有子元素。</p>
<p>css flex布局：<br>justify-content (适用于父类容器上)<br>设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式。</p>
<pre><code>display:flex;
justify-content:space-between;
</code></pre><p> 下面的注册帐号以及忘记密码：（比较常用）<br><img src="http://ooerhngjn.bkt.clouddn.com/flex-demo.png" alt="flex-demo"></p>
<p><img src="http://ooerhngjn.bkt.clouddn.com/flex-demos.png" alt="flex-demos"></p>
]]></content>
      
        
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React.js小书总结]]></title>
      <url>/2017/08/27/react.js%E5%B0%8F%E4%B9%A6%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h3 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h3><blockquote>
<ul>
<li><p>react的组件相当于MVC里面的View。</p>
</li>
<li><p>react.js 将帮助我们将界面分成了各个独立的小块，每一个块就是组件，这些组件之间可以组合、嵌套，就成了我们的页面。</p>
</li>
<li><p>react.js 不是一个框架，它只是一个库。它只提供 UI （view）层面的解决方案。在实际的项目当中，它并不能解决我们所有的问题，需要结合其它的库，例如 Redux、React-router 等来协助提供完整的解决方法。</p>
<a id="more"></a>
</li>
<li><p>组件化可以帮助我们解决前端结构的复用性问题，整个页面可以由这样的不同的组件组合、嵌套构成。</p>
</li>
<li><p>react-dom 负责把这个用来描述 UI 信息的 JavaScript 对象变成 DOM 元素，并且渲染到页面上。</p>
</li>
<li><p>在 JavaScript 写的标签的”语法叫 JSX。JSX 是 JavaScript 语言的一种语法扩展，长得像 HTML，但并不是 HTML。</p>
</li>
<li><p>JSX 其实就是 JavaScript 对象。JSX 在编译的时候会变成相应的 JavaScript 对象描述。</p>
</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ReactDOM.render(</div><div class="line">  &lt;Header /&gt;,</div><div class="line">  document.getElementById(&apos;root&apos;)</div><div class="line">)</div></pre></td></tr></table></figure>
<p>ReactDOM.render 功能就是把组件渲染并且构造 DOM 树，然后插入到页面上某个特定的元素上（在这里是 id 为 root 的 div 元素）。</p>
<hr>
<blockquote>
<ul>
<li><p>render 方法必须要返回一个 JSX 元素，必须要用一个外层的 JSX 元素把所有内容包裹起来。返回并列多个 JSX 元素是不合法的。</p>
</li>
<li><p>直接在JSX中加入if语句会渲染出无效的javascript。</p>
</li>
<li>可以这么写，立即执行函数：<br>{ ( ()=&gt;{<br>if ( i = 0){<br>…<br>}<br>} ) ( ) }</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">  &lt;Title /&gt; //Title组件</div><div class="line">  &lt;Title /&gt;</div><div class="line">  &lt;Title /&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p> 自定义的组件都必须要用大写字母开头，普通的 HTML 标签都用小写字母开头。 </p>
<blockquote>
<ul>
<li><p>on* 的事件监听只能用在普通的 HTML 的标签上，而不能用在组件标签上。</p>
</li>
<li><p>一般在某个类的实例方法里面的 this 指的是这个实例本身。</p>
</li>
</ul>
</blockquote>
<hr>
<p>下面这两种方法都可以绑定事件监听：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  bark () &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'bark'</span>)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  run () &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'run'</span>)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  handleClick()&#123;</div><div class="line">    <span class="keyword">this</span>.bark();</div><div class="line">    <span class="keyword">this</span>.run();</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  render () &#123;</div><div class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span> = <span class="string">&#123;this.handleClick.bind(this)&#125;</span>&gt;</span>DOG<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意return之后的代码。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class Dog extends Component &#123;</div><div class="line">  bark () &#123;</div><div class="line">    console.log('bark')</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  run () &#123;</div><div class="line">    console.log('run')</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  handleClick()&#123;</div><div class="line">    this.bark();</div><div class="line">    this.run();</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  render () &#123;</div><div class="line">    return (&lt;div onClick = &#123;()=&gt;&#123;this.handleClick()&#125;&#125;&gt;DOG&lt;/div&gt;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>我们要改变组件的状态的时候，不能直接用 this.state = xxx 这种方式来修改，如果这样做 React.js 就没办法知道你修改了组件的状态，它也就没有办法更新页面。所以，一定要使用 React.js 提供的 setState 方法，它接受一个对象或者函数作为参数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">  constructor (props) &#123;</div><div class="line">    <span class="keyword">super</span>(props)</div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">      <span class="attr">name</span>: <span class="string">'Tomy'</span>,</div><div class="line">      <span class="attr">isLiked</span>: <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleClickOnLikeButton () &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">      <span class="attr">isLiked</span>: !<span class="keyword">this</span>.state.isLiked</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>注：上述方法不会立即更新，不可以做后续运算。<br>setState的第二种使用方式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">  handleClickOnLikeButton () &#123;</div><div class="line">    <span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: prevState.count + <span class="number">1</span> &#125; <span class="comment">// 上一个 setState 的返回是 count 为 0，当前返回 1</span></div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: prevState.count + <span class="number">2</span> &#125; <span class="comment">// 上一个 setState 的返回是 count 为 1，当前返回 3</span></div><div class="line">    &#125;)</div><div class="line">    <span class="comment">// 最后的结果是 this.state.count 为 3</span></div><div class="line">  &#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>在使用 React.js 的时候，并不需要担心多次进行 setState 会带来性能问题。</p>
<hr>
<blockquote>
<ul>
<li>List item每个组件都可以接受一个 props 参数，它是一个对象，包含了所有你对这个组件的配置。</li>
<li>默认配置 defaultProps。</li>
<li>props 一旦传入进来就不能改变。</li>
<li>state 是让组件控制自己的状态，props 是让外部对组件自己进行配置。</li>
<li>在 React.js 处理列表就是用 map 来处理、渲染的。</li>
<li>如果一个文件导出的是一个类，那么这个文件名就用大写开头。四个组件类文件导出都是类，所以都是大写字母开头。</li>
</ul>
</blockquote>
<h3 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h3><blockquote>
<p>当某个状态被多个组件依赖或者影响的时候，就把该状态提升到这些组件的最近公共父组件中去管理，用 props 传递数据或者函数来管理这种<br>依赖或着影响的行为。</p>
<p>React.js 控制组件在页面上挂载和删除过程里面几个方法：</p>
<ul>
<li>componentWillMount：组件挂载开始之前，也就是在组件调用 render 方法之前调用。</li>
<li>componentDidMount：组件挂载完成以后，也就是 DOM 元素已经插入页面后调用。</li>
<li>componentWillUnmount：组件对应的 DOM 元素从页面中删除之前调用。</li>
</ul>
<p>我们可以给任意代表 HTML 元素标签加上 ref 从而获取到它 DOM 元素然后调用 DOM API。但是记住一个原则：能不用 ref 就不用。</p>
<p>使用自定义组件的时候，可以在其中嵌套 JSX 结构。嵌套的结构在组件内部都可以通过 props.children 获取到，这种组件编写方式在编写容器类型的组件当中非常有用。而在实际的 React.js 项目当中，我们几乎每天都需要用这种方式来编写组件。</p>
</blockquote>
<p>在 React.js 中你需要把 CSS 属性变成一个对象再传给元素：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;h1 style=&#123;&#123;fontSize: &apos;12px&apos;, color: &apos;red&apos;&#125;&#125;&gt;React.js 小书&lt;/h1&gt;</div></pre></td></tr></table></figure></p>
<hr>
<p>组件的私有方法都用 _ 开头，所有事件监听的方法都用 handle 开头。把事件监听方法传给组件的时候，属性名用 on 开头。</p>
<blockquote>
<p><strong>组件的内容编写顺序如下</strong>：(对自己要求严格遵守)</p>
</blockquote>
<ol>
<li>static 开头的类属性，如 defaultProps、propTypes。</li>
<li>构造函数，constructor。</li>
<li>getter/setter（还不了解的同学可以暂时忽略）。</li>
<li>组件生命周期。</li>
<li>_ 开头的私有方法。</li>
<li>事件监听方法，handle*。</li>
<li>render<em>开头的方法，有时候 render() 方法里面的内容会分开到不同函数里面进行，这些函数都以 render</em> 开头。<br>render() 方法。</li>
</ol>
<p>###第三阶段<br><strong>高阶组件</strong>就是一个函数(而不是组件)，传给它一个组件，它返回一个新的组件。新的组件使用传入的组件作为子组件。</p>
<pre><code>const NewComponent = higherOrderComponent(OldComponent)
</code></pre><p>高阶组件的作用是用于代码复用，可以把组件之间可复用的代码、逻辑抽离到高阶组件当中。新的组件和传入的组件通过 props 传递信息。</p>
<hr>
<p>一个组件可以通过 getChildContext 方法返回一个对象，这个对象就是子树的 context，提供 context 的组件必须提供 childContextTypes 作为 context 的声明和验证。</p>
<p>如果一个组件设置了 context，那么它的子组件都可以直接访问到里面的内容，它就像这个组件为根的子树的全局变量。任意深度的子组件都可以通过 contextTypes 来声明你想要的 context 里面的哪些状态，然后可以通过 this.context 访问到那些状态。</p>
<p>context 打破了组件和组件之间通过 props 传递数据的规范，极大地增强了组件之间的耦合性。而且，就如全局变量一样，context 里面的数据能被随意接触就能被随意修改，每个组件都能够改 context 里面的内容会导致程序的运行不可预料。</p>
<p>但是这种机制对于前端应用状态管理来说是很有帮助的，因为毕竟很多状态都会在组件之间进行共享，context 会给我们带来很大的方便。一些第三方的前端应用状态管理的库（例如 Redux）就是充分地利用了这种机制给我们提供便利的状态管理服务。但我们一般不需要手动写 context，也不要用它，只需要用好这些第三方的应用状态管理库就行了。</p>
<blockquote>
<p>Redux是一种新型的前端“架构模式”。经常和 React.js 一并提出，你要用 React.js 基本都要伴随着 Redux 和 React.js 结合的库 React-redux。</p>
<p>Redux 和 React-redux 并不是同一个东西。Redux 是一种架构模式（Flux 架构的一种变种），它不关注你到底用什么库，你可以把它应用到 React 和 Vue，甚至跟 jQuery 结合都没有问题。而 React-redux 就是把 Redux 这种架构模式和 React.js 结合起来的一个库，就是 Redux 架构在 React.js 中的体现。</p>
</blockquote>
<hr>
<p>矛盾：react中不同模块（组件）之间需要共享数据，可能有的模块（组件）还需要修改这些数据。所以就有了“模块（组件）之间需要共享数据”和“数据可能被任意修改导致不可意料的结果”之间的矛盾。<br>于是我们必须解决这个问题，react.js团队的做法是提高数据修改的门槛：模块（组件）之间的共享数据不能随意修改，只能执行允许的某些修改，而且必须通知我。</p>
<pre><code>function dispatch (action) {
 switch (action.type) {
  case &apos;UPDATE_TITLE_TEXT&apos;:
  appState.title.text = action.text
  break
  case &apos;UPDATE_TITLE_COLOR&apos;:
  appState.title.color = action.color
  break
  default:
  break
     }
  }
</code></pre><p>所有对数据的操作必须通过dispatch函数。<br><img src="http://huzidaha.github.io/static/assets/img/posts/7536BBF9-6563-4FD5-8359-28D3A5254EE7.png" alt="dispatch"></p>
<blockquote>
<p>设计模式之观察者模式：<br>也被称作发布/订阅模式，观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听同一个主题对象。这个主题对象在状态发生变化时，会通知所有的观察者对象，使他们能够自动更新自己。</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> react </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS3常用动效以及总结]]></title>
      <url>/2017/08/06/CSS3%E5%B8%B8%E7%94%A8%E5%8A%A8%E6%95%88%E4%BB%A5%E5%8F%8A%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>1.CSS3 文本效果：<br>box-shadow：盒子阴影，可以给卡片添加提高美化效果。可广泛应用于内容展示页面。</p>
<hr>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>7<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>January 7, 2017<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-class">.card</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">250px</span>;</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">8px</span> <span class="number">0</span> <span class="built_in">rgba</span>(0, 0, 0, 0.2), <span class="number">0</span> <span class="number">6px</span> <span class="number">20px</span> <span class="number">0</span> <span class="built_in">rgba</span>(0, 0, 0, 0.19);</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">div</span><span class="selector-class">.header</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#4CAF50</span>;</div><div class="line">    <span class="attribute">color</span>: white;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">div</span><span class="selector-class">.container</span> &#123;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果如下：<br><img src="http://ooerhngjn.bkt.clouddn.com/17-8-7/9084027.jpg" alt=""></p>
<hr>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"polaroid"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"rock600x400.jpg"</span> <span class="attr">alt</span>=<span class="string">"Norway"</span> <span class="attr">style</span>=<span class="string">"width:100%"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hardanger, Norway<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-class">.polaroid</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">250px</span>;</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">8px</span> <span class="number">0</span> <span class="built_in">rgba</span>(0, 0, 0, 0.2), <span class="number">0</span> <span class="number">6px</span> <span class="number">20px</span> <span class="number">0</span> <span class="built_in">rgba</span>(0, 0, 0, 0.19);</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">div</span><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果如下：<br><img src="http://ooerhngjn.bkt.clouddn.com/17-8-7/60916299.jpg" alt=""></p>
<p>  2.css3 过渡：<br>  最简单的过渡是一个div，给它加上如下代码，便可以从宽度100px华丽的过渡到宽度为300px。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span></div><div class="line">&#123;</div><div class="line">	<span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">	<span class="attribute">background</span>:red;</div><div class="line">	<span class="attribute">transition</span>:width <span class="number">2s</span>;</div><div class="line">	<span class="attribute">-webkit-transition</span>:width <span class="number">2s</span>; <span class="comment">/* Safari */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span></div><div class="line">&#123;</div><div class="line">	<span class="attribute">width</span>:<span class="number">300px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么再来点高级的，我们经常在页面上看到炫酷的动效，其实仔细分析，你会发现它并不难做，好多华丽的效果甚至都用不到js就能实现，比如下面这个例子。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"describe"</span>&gt;</span>css3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"describe"</span>&gt;</span>过渡<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#BCEE68</span>;</div><div class="line">	<span class="attribute">color</span>:white;</div><div class="line">	<span class="attribute">font-weight</span>:bold;</div><div class="line">    <span class="attribute">-webkit-transition</span>: width <span class="number">1s</span>, height <span class="number">1s</span>,font-size <span class="number">1s</span>, color <span class="number">1s</span>,-webkit-transform <span class="number">1s</span>; <span class="comment">/* For Safari 3.1 to 6.0 */</span></div><div class="line">    <span class="attribute">transition</span>: width <span class="number">1s</span>, height <span class="number">1s</span>, color <span class="number">1s</span>,font-size <span class="number">1s</span>, transform <span class="number">1s</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">90px</span>;</div><div class="line">	<span class="attribute">background</span>:<span class="number">#9B30FF</span>;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(360deg); <span class="comment">/* Chrome, Safari, Opera */</span></div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(360deg);</div><div class="line">	<span class="attribute">font-size</span>:<span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.describe</span>&#123;</div><div class="line">	<span class="attribute">text-align</span>:center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果非常炫酷，不是静态所以就不上图了，有兴趣的自己试下。可以用作展示页，也可以用作一行导航菜单，会反转变样式的一组菜单很时尚的嘿嘿。</p>
<p>由于时间有限，本博客将于未来几天持续更新。</p>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux常用命令总结]]></title>
      <url>/2017/06/23/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p><strong>删除文件夹和文件的命令：</strong> rm -rf 目录名字<br>将会删除目录以及其下所有文件、文件夹<br>-r 就是向下递归，不管有多少级目录，一并删除<br>-f 就是直接强行删除，不作任何提示的意思<br><strong>显示文件或目录:</strong> ls<br><strong>创建目录:</strong> mkdir 文件夹名<br><strong>创建文件:</strong> touch 文件名<br><strong>显示当前目录：</strong> pwd<br><strong>移动或重命名:</strong> mv<br>mv 文件名 文件名    将源文件名改为目标文件名<br>mv 文件名 目录名    将文件移动到目标目录<br> <strong>拷贝:</strong> cp<br> <a id="more"></a><br> <strong>测试网络连通:</strong> ping</p>
<p> <strong>vim命令:</strong><br> vim有3个模式：插入模式、命令模式、低行模式。<br>插入模式：在此模式下可以输入字符，按ESC将回到命令模式。<br>命令模式：可以移动光标、删除字符等。<br>低行模式：可以保存文件、退出vi、设置vi、查找等功能(低行模式也可以看作是命令模式里的)。<br>:w           //保存文件<br>:q           //退出编辑器，如果文件已修改请使用下面的命令<br>:q!//退出编辑器，且不保存<br>:wq          //退出编辑器，且保存文件<br>i   插入文本<br>x  删除<br>p 粘贴</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js注意点：数组比较大小方法及数组与对象的区别]]></title>
      <url>/2017/04/19/js%E6%B3%A8%E6%84%8F%E7%82%B9%EF%BC%9A%E6%95%B0%E7%BB%84%E6%AF%94%E8%BE%83%E5%A4%A7%E5%B0%8F%E6%96%B9%E6%B3%95%E5%8F%8A%E6%95%B0%E7%BB%84%E4%B8%8E%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<h3 id="快速复制数组及数组比较大小方法"><a href="#快速复制数组及数组比较大小方法" class="headerlink" title="快速复制数组及数组比较大小方法"></a>快速复制数组及数组比较大小方法</h3><p>首先介绍一下复制数组的方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>];</div><div class="line"><span class="keyword">var</span> aCopy = arr.slice();</div><div class="line">aCopy; <span class="comment">// ['A', 'B', 'C', 'D', 'E', 'F', 'G'];</span></div></pre></td></tr></table></figure>
<p>这样就成功复制数组了，是不是很神奇？<br>slice()就是对应String的substring()版本，它截取Array的部分元素，然后返回一个新的Array：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>];</div><div class="line">arr.slice(<span class="number">0</span>, <span class="number">3</span>); <span class="comment">// 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']</span></div><div class="line">arr.slice(<span class="number">3</span>); <span class="comment">// 从索引3开始到结束: ['D', 'E', 'F', 'G']</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>注意到slice()的起止参数包括开始索引，不包括结束索引。<br>如果不给slice()传递任何参数，它就会从头到尾截取所有元素。利用这一点，我们可以很容易地复制一个Array。也就是我们第一段程序的原理所在。</p>
<p>然后给出一段代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> copyarr=arr.slice();</div><div class="line"><span class="built_in">console</span>.log(arr===copyarr);</div></pre></td></tr></table></figure>
<p>这时你就会想copyarr数组是由arr复制而来的，它们应该相等才对。然而你发现这时浏览器返回的是false，它们不相等。这是为什么呢？<br>原来，两个数组比较大小是不能通过==或者===来比较的，无论是相等还是全等都不行，都会返回false。<br>正确比较方法：要判断JS中的两个数组是否相同，需要先将数组转换为字符串，再作比较。<br>以下两行代码将返回true。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alert([].toString()== [].toString());</div><div class="line">alert([].toString()===[].toString());</div></pre></td></tr></table></figure>
<p>延伸：如果要比较两个数组是否具有相同的元素，即两个数组所有元素都相同，但元素的顺序不一定一致。只就需要先将数组进行排序，再比较两个数组是否相等。看下面两行代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alert([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].toString()== [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>].toString());</div><div class="line">alert([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].sort().toString()== [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>].sort().toString());</div></pre></td></tr></table></figure>
<p>第一行返回false，第二行返回true。第二行是正确姿势！</p>
<p>接下来解释下为什么两个数组比较大小是不能通过==或者===来比较的。<br>因为在js中数组是对象，即使是相同的数组也会有不同的地址，所以返回的是false。</p>
<h3 id="js数组和对象的区别"><a href="#js数组和对象的区别" class="headerlink" title="js数组和对象的区别"></a>js数组和对象的区别</h3><p>最后，既然说到数组是对象，那么来看下js数组和对象的区别。</p>
<p>两者都可以用来表示数据的集合：比如有一个数组a=[1,2,3,4]，还有一个对象a={0:1,1:2,2:3,3:4}，然后你运行alert(a[1])，两种情况下的运行结果是相同的！这就是说，数据集合既可以用数组表示，也可以用对象表示，那么我到底该用哪一种呢？数组表示有序数据的集合，而对象表示无序数据的集合。如果数据的顺序很重要，就用数组，否则就用对象。<br>数组和对象的另一个区别是，数组的数据没有”名称”（name），对象的数据有”名称”（name）。很多编程语言中，都有一种叫做”关联数组”（associative array）的东西。这种数组中的数据是有名称的。<br>比如在javascript中，可以这样定义一个对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=&#123;“城市”:”北京”,”面积”:<span class="number">16800</span>,”人口”:<span class="number">1600</span>&#125;;</div></pre></td></tr></table></figure></p>
<p>但是，也可以定义成一个关联数组：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a[<span class="string">"城市"</span>]=”北京”;</div><div class="line">a[<span class="string">"面积"</span>]=<span class="number">16800</span>;</div><div class="line">a[<span class="string">"人口"</span>]=<span class="number">1600</span>;</div></pre></td></tr></table></figure></p>
<p>其实在Javascript中，关联数组就是对象，对象就是关联数组。这一点与php语言完全不同，在php中，关联数组也是数组。<br>比如运行下面这段javascript：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line">a[<span class="string">'foo'</span>]=’Hello World’;</div><div class="line">alert(a.length);</div></pre></td></tr></table></figure></p>
<p>最后的结果是4，也就是说，数组a的元素个数是4个。<br>但是，运行同样内容的php代码就不一样了：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt; ? php</div><div class="line">$a=<span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</div><div class="line">$a[<span class="string">"foo"</span>]=”Hello world”;</div><div class="line"><span class="keyword">echo</span> count($a);</div><div class="line">? &gt;</div></pre></td></tr></table></figure></p>
<p>最后的结果是5，也就是说，数组a的元素个数是5个。</p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nodejs运行错误小结]]></title>
      <url>/2017/04/15/Nodejs%E8%BF%90%E8%A1%8C%E9%94%99%E8%AF%AF%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<p><strong>在使用过程中会遇到一些问题，学习过程中不定期更新。</strong><br><strong>问题一</strong> 错误如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">**events.js:72</div><div class="line">        throw er; // Unhandled &apos;error&apos; event</div><div class="line">              ^</div><div class="line">Error: listen EADDRINUSE</div><div class="line">    at errnoException (net.js:901:11)</div><div class="line">    at Server._listen2 (net.js:1039:14)</div><div class="line">    at listen (net.js:1061:10)</div><div class="line">    at Server.listen (net.js:1127:5)</div><div class="line">    at Object.&lt;anonymous&gt; (./server/index.js:73:24)</div><div class="line">    at Module._compile (module.js:456:26)</div><div class="line">    at Object.Module._extensions..js (module.js:474:10)</div><div class="line">    at Module.load (module.js:356:32)</div><div class="line">    at Function.Module._load (module.js:312:12)</div><div class="line">    at Function.Module.runMain (module.js:497:10)**</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>这表明端口已经被占用，所以解决办法有两种：<br>1.需改nodejs中的侦听端口，如将默认的80端口改成8080端口,<br>2.找到已经占用nodejs端口的应用，然后杀掉该应用，最后重启nodejs。</p>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo+github搭建博客]]></title>
      <url>/2017/04/10/Hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>很多人想要一个自己的博客，不管是写文章还是技术分享，hexo都是不错的选择。hexo是一款基于Node.js的静态博客框架，可能第一次搭建起来会有很多坑，不过还是很简单的。下面是搭建步骤。</p>
<h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p>1.安装Node<br>用来生成静态页面，到Node.js官网下载相应平台的最新版本，一路安装即可。<br><a id="more"></a><br><img src="http://i4.buimg.com/567571/c55f35f67a99f923.png" alt=""><br>2.安装git<br>Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。安装后可以把本地的hexo内容提交到github上去。<br><img src="http://i2.muimg.com/567571/13c76c7a11c22460.png" alt=""><br>3.申请GitHub<br>没有帐号的可以注册，已经有的请自动略过。需要注意的是用户名一定要起自己喜欢的，因为后期用用户名作域名。</p>
<p>对于前端开发者来说，以上三者是开发必备，还不会的可以去网上看看教程。<br>git教程推荐廖雪峰的博客。</p>
<h3 id="正式安装Hexo"><a href="#正式安装Hexo" class="headerlink" title="正式安装Hexo"></a>正式安装Hexo</h3><p>1.装好node和git之后，创建一个blog文件夹，用来存放Hexo的配置文件。然后进入blog安装Hexo。打开bash或者cmd，进入blog文件夹，在命令行中输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install hexo-cli -g</div></pre></td></tr></table></figure></p>
<p>下面就可以生成博客，上传到github上了。<br>执行init命令初始化hexo,命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure></p>
<p>生成静态页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate（hexo g也可以）</div></pre></td></tr></table></figure></p>
<p>本地启动</p>
<p>启动本地服务，进行文章预览调试，命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server (hexo s 也可以)</div></pre></td></tr></table></figure></p>
<p><img src="http://i4.buimg.com/567571/efaf3e67da085d61.png" alt=""><br>浏览器输入<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a></p>
<p><img src="http://i1.piimg.com/567571/dfe149c61678be1a.png" alt=""><br>如果能跑起来就基本没问题。当然你的博客刚打开不会这么炫酷，我的是后期配置好的，想要博客更好看就从第一步慢慢做起吧。<br>接下来让博客跑在guthub服务器上。</p>
<h3 id="配置github"><a href="#配置github" class="headerlink" title="配置github"></a>配置github</h3><p>建立Repository</p>
<p><img src="http://i1.piimg.com/567571/a5eef6af4f8cdb2d.png" alt=""><br>建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法。</p>
<p><img src="http://i2.muimg.com/567571/2bcc61a3702c76f8.png" alt=""><br>接下来写好文章就能发布到 Github 上了，第一次发布需要安装hexo-deployer-git自动部署发布工具。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>接下来提交博客，博客网址即为 username.github.io</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo d -g</div></pre></td></tr></table></figure>
<p>以后每次写完文章都是这么提交。</p>
<h3 id="写博客以及基本配置"><a href="#写博客以及基本配置" class="headerlink" title="写博客以及基本配置"></a>写博客以及基本配置</h3><p>下载个好看的主题：（当然可以自己搜好多其他主题）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>
<p>我们对博客修改相应的配置，我们用到_config.yml文件，下面是该文件的默认参数信息：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"># Hexo Configuration</div><div class="line">## Docs: https://hexo.io/docs/configuration.html</div><div class="line">## Source: https://github.com/hexojs/hexo/</div><div class="line"></div><div class="line"># Site</div><div class="line">title: # The title of your website</div><div class="line">subtitle: # The subtitle of your website</div><div class="line">description: # The description of your website</div><div class="line">author: # Your name</div><div class="line">language: # The language of your website</div><div class="line">timezone: </div><div class="line"></div><div class="line"># URL</div><div class="line">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</div><div class="line">url: http://yoursite.com/child</div><div class="line">root: /</div><div class="line">permalink: :year/:month/:day/:title/</div><div class="line">permalink_defaults:</div><div class="line"></div><div class="line"># Directory</div><div class="line">source_dir: source</div><div class="line">public_dir: public</div><div class="line">tag_dir: tags</div><div class="line">archive_dir: archives</div><div class="line">category_dir: categories</div><div class="line">code_dir: downloads/code</div><div class="line">i18n_dir: :lang</div><div class="line">skip_render:</div><div class="line"></div><div class="line"># Writing</div><div class="line">new_post_name: :title.md # File name of new posts</div><div class="line">default_layout: post</div><div class="line">titlecase: false # Transform title into titlecase</div><div class="line">external_link: true # Open external links in new tab</div><div class="line">filename_case: 0</div><div class="line">render_drafts: false</div><div class="line">post_asset_folder: false</div><div class="line">relative_link: false</div><div class="line">future: true</div><div class="line">highlight:</div><div class="line">  enable: true</div><div class="line">  line_number: true</div><div class="line">  auto_detect: false</div><div class="line">  tab_replace:</div><div class="line"></div><div class="line"># Category &amp; Tag</div><div class="line">default_category: uncategorized</div><div class="line">category_map:</div><div class="line">tag_map:</div><div class="line"></div><div class="line"># Date / Time format</div><div class="line">## Hexo uses Moment.js to parse and display date</div><div class="line">## You can customize the date format as defined in</div><div class="line">## http://momentjs.com/docs/#/displaying/format/</div><div class="line">date_format: YYYY-MM-DD</div><div class="line">time_format: HH:mm:ss</div><div class="line"></div><div class="line"># Pagination</div><div class="line">## Set per_page to 0 to disable pagination</div><div class="line">per_page: 10</div><div class="line">pagination_dir: page</div><div class="line"></div><div class="line"># Extensions</div><div class="line">## Plugins: https://hexo.io/plugins/</div><div class="line">## Themes: https://hexo.io/themes/</div><div class="line">theme: landscape</div><div class="line"></div><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type:</div></pre></td></tr></table></figure>
<p>不要被吓到，需要配置的只有几项，英文好的同学轻松搞定。<br>修改网站信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">title: 我的博客</div><div class="line">subtitle: the stack of it nerds</div><div class="line">description: 描述</div><div class="line">author: 你的名字</div><div class="line">language: zh-CN</div><div class="line">timezone: Asia/Shanghai</div></pre></td></tr></table></figure>
<p>配置部署：<br>（一定要修改）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">theme: next</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: https://github.com/iyanming/iyanming.github.io.git</div></pre></td></tr></table></figure></p>
<p>想要美化的朋友可以到Next主题官网查看教程，在主题配置文件下改参数。</p>
<p>终于到了激动人心的时候了！！！<br>在 /source/_posts 下创建你的第一篇博客吧。<br>文章是后缀为md的文件，用markdown书写博客，推荐在线编辑网站小书匠，可导出到本地，然后执行hexo d -g提交博客。</p>
<p><img src="http://i2.muimg.com/567571/631e3941dd1f1f28.png" alt=""><br>然后你们可能不想用github上username.github.io这个域名，那接下来到腾讯云申请个域名和服务器，学生有优惠一块钱一个月，还是很实惠的。<br>域名可以起自己喜欢的名字，当然是没有被占用的情况下。<br>抢到了之后就要开始域名的绑定了：<br>首先对域名进行解析</p>
<p><img src="http://i4.buimg.com/567571/bee63e93fe06aca6.png" alt=""></p>
<p>然后在source文件夹里创建CNAME文件，不带任何后缀，里面添加你的域名信息，如：iyanming.cn（注意前面不添加http://）<br>然后hexo d -g上传到github。这样，其他人就可以通过访问你的域名地址进入你的博客了。<br>这样，博客搭建基本完成。<br>当然在搭建过程中可能会有bug或者会在某一步卡住，多思考，多百度，其实还是很容易的。<br>写文匆忙，若出现问题，希望不吝赐教，告于在下。</p>
]]></content>
      
        <categories>
            
            <category> 搭建博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
